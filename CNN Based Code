Folder Structure 
crack_dataset/
├── train/
   ├── longitudinal/
   ├── transverse/
   ├── pothole/
   ├── block/
   ├── alligator/
   └── edge/
├── validation/
   ├── longitudinal/
   ├── transverse/
   ├── pothole/
   ├── block/
   ├── alligator/
   └── edge/

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Settings
img_height, img_width = 150, 150
batch_size = 32
num_classes = 6

# Directories
train_dir = 'crack_dataset/train'
val_dir = 'crack_dataset/validation'

# Data Generators
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True
)

val_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical'  # for multi-class
)

val_data = val_datagen.flow_from_directory(
    val_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical'
)

# CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),
    MaxPooling2D(2, 2),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')  # Softmax for multi-class
])

# Compile Model
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Train Model
history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=15
)

# Plot Accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Save model
model.save('multi_class_crack_classifier.h5')


✅ Predict with Class Labels
#To predict an image and get its class label:

from tensorflow.keras.preprocessing import image
import numpy as np

# Load model
model = tf.keras.models.load_model('multi_class_crack_classifier.h5')

# Class labels must match folder names in alphabetical order
class_labels = ['alligator', 'block', 'edge', 'longitudinal', 'pothole', 'transverse']

# Load and preprocess image
img_path = 'sample.jpg'
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0) / 255.0

# Predict
pred = model.predict(img_array)
predicted_class = class_labels[np.argmax(pred)]
print("Predicted Class:", predicted_class)
