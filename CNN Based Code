#Folder Structure
crack_dataset/
â”œâ”€â”€ train/
    â”œâ”€â”€ crack/
    â””â”€â”€ no_crack/
â”œâ”€â”€ validation/
    â”œâ”€â”€ crack/
    â””â”€â”€ no_crack/

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Set image size and paths
img_height, img_width = 150, 150
batch_size = 32
train_dir = 'crack_dataset/train'
val_dir = 'crack_dataset/validation'

# Data augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True)

val_datagen = ImageDataGenerator(rescale=1./255)

# Load images
train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary')

val_data = val_datagen.flow_from_directory(
    val_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary')

# Build CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),
    MaxPooling2D(2, 2),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification
])

# Compile model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=10
)

# Plot training results
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title("CNN Crack Classification Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.show()

# Save model
model.save('crack_classifier_cnn.h5')


#ðŸ“Œ Notes
#You need to prepare a labeled dataset in the specified folder structure.

#You can adjust image size, layers, and epochs based on your dataset size and performance.

#You can load and test an image like this:

from tensorflow.keras.preprocessing import image
import numpy as np

img_path = 'sample.jpg'
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0) / 255.0

prediction = model.predict(img_array)
print("Crack Detected" if prediction[0][0] > 0.5 else "No Crack Detected")







